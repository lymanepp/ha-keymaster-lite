
####################  input_text:  ###############
input_text:
  frontdoor_name_4:
    name: 'Name'
  frontdoor_pin_4:
    name: 'PIN'
    mode: text

#################  input_boolean:  ################
input_boolean:
  smtwtfs_frontdoor_4:
    name: 'Use SMTWTFS'
  enabled_frontdoor_4:
    name: 'Enabled'
  reset_codeslot_frontdoor_4:
    name: 'Reset Code Slot'
    initial: off

################  automation:  #################
automation:

- alias: synchronize_codeslot_frontdoor_4
  initial_state: true
  trigger:
    - platform: state
      entity_id: "binary_sensor.pin_synched_frontdoor_4"
      to: 'off'
    - platform: state
      entity_id: "input_boolean.allow_automation_execution"
      to: 'on'
    - platform: state
      entity_id: "sensor.frontdoor_code_slot_4"
  condition:
    - condition: state
      entity_id: "input_boolean.allow_automation_execution"
      state: "on"
    - condition: state
      entity_id: "binary_sensor.pin_synched_frontdoor_4"
      state: "off"
    - condition: template
      value_template: "{{ not is_state('sensor.frontdoor_code_slot_4', 'unavailable') }}"
  action:
    - choose:

        # The code should be added to the lock's slot
        - conditions:
            - condition: template
              value_template: "{{ is_state('binary_sensor.active_frontdoor_4', 'on') }}"
          sequence:
            - service: keymaster_lite.add_code
              data_template:
                entity_id: lock.smartcode_10_touchpad_electronic_deadbolt_locked
                code_slot: "{{ 4 }}"
                usercode: "{{ states('input_text.frontdoor_pin_4').strip() }}"

        # The code should be removed from the lock's slot
        - conditions:
            - condition: template
              value_template: "{{ is_state('binary_sensor.active_frontdoor_4', 'off') }}"
          sequence:
            - service: keymaster_lite.clear_code
              data_template:
                entity_id: lock.smartcode_10_touchpad_electronic_deadbolt_locked
                code_slot: "{{ 4 }}"
          
- alias: reset_codeslot_frontdoor_4
  trigger:
    entity_id: input_boolean.reset_codeslot_frontdoor_4
    platform: state
    to: 'on'
  action:
    - service: script.reset_codeslot_frontdoor
      data_template:
        code_slot: 4
      
################  binary_sensor:  #################
binary_sensor:

- platform: template
  sensors:

    active_frontdoor_4:
      friendly_name: "Desired PIN State"
      value_template: >-
        {## This template checks whether the PIN should be considered active based on ##}
        {% set is_slot_active = is_state('input_boolean.enabled_frontdoor_4', 'on') %}
        {{ is_slot_active }}

    pin_synched_frontdoor_4:
      friendly_name: 'PIN synchronized with lock'
      value_template: >
        {% set lockpin = states('sensor.frontdoor_code_slot_4') %}
        {% if is_state('binary_sensor.active_frontdoor_4', 'on') %}
          {{ is_state('input_text.frontdoor_pin_4', lockpin) }}
        {% else %}
          {{ lockpin in ("", "0000") }}
        {% endif %}

###################  sensor:  ####################
sensor:

- platform: template
  sensors:
  
    connected_frontdoor_4:
      # icon: mdi:glassdoor
      friendly_name: "PIN Status"
      value_template: >-
        {% set value_map = {
          True: {
            True: 'Connected',
            False: 'Adding',
          },
          False: {
            True: 'Disconnected',
            False: 'Deleting',
          },
        } %}
        {% set slot_active = is_state('binary_sensor.active_frontdoor_4', 'on') %}
        {% set pin_synched = is_state('binary_sensor.pin_synched_frontdoor_4', 'on') %}
        {{ value_map[slot_active][pin_synched] }}
      icon_template: >
        {% set icon_map = {
          True: {
            True: 'mdi:folder-key',
            False: 'mdi:folder-key-network',
          },
          False: {
            True: 'mdi:folder-open',
            False: 'mdi:wiper-watch',
          },
        } %}
        {% set slot_active = is_state('binary_sensor.active_frontdoor_4', 'on') %}
        {% set pin_synched = is_state('binary_sensor.pin_synched_frontdoor_4', 'on') %}
        {{ icon_map[slot_active][pin_synched] }}